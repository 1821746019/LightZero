[project]
name = "LightZero"
version = "0.2.0"
description = "A lightweight and efficient MCTS/AlphaZero/MuZero algorithm toolkits."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "Apache License, Version 2.0" }
authors = [
    { name = "opendilab", email = "opendilab@pjlab.org.cn" }
]
keywords = ["Reinforcement Learning", "MCTS", "MuZero"]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    "Intended Audience :: Science/Research",
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: POSIX :: Linux',
    # 'Operating System :: Microsoft :: Windows',
    'Operating System :: MacOS :: MacOS X',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
]
dependencies = [
    "DI-engine>=0.5.3",
    "gymnasium[atari]==0.28.0",
    "numpy>=1.24.1,<2",
    "pympler",
    "minigrid",
    "moviepy",
    "pytest",
    "line_profiler",
    "xxhash",
    "einops",
    "openai",
    "nltk",
    "numba",
    "transformers",
    "pyecharts",
    "cython>=0.29",
    "build>=0.7.0",
    "auditwheel>=4",
    
]

[project.urls]
"Homepage" = "https://github.com/opendilab/LightZero"

[project.optional-dependencies]
build = [

    # "numpy>=1.21.6",
]
doc = [
    "Jinja2~=3.0.3",
    "sphinx<7",
    "sphinx_rtd_theme~=2.0.0",
    "sphinx-autodoc-typehints~=1.12.0",
    "enum_tools",
    "sphinx-toolbox",
    "plantumlcli>=0.0.4",
    "packaging",
    "sphinx-multiversion~=0.2.4",
    "where~=1.0.2",
    "numpy>=1.19,<2",
    "easydict>=1.7,<2",
    "scikit-learn>=0.24.2",
    "nbsphinx>=0.8.8",
    "ipython>=7.16.3",
    "psutil>=5.8.0",
    "ipykernel>=6.15",
    "py-cpuinfo>=8.0.0",
    "recommonmark>=0.7.1",

]
test = [
    "coverage>=5",
    "mock>=4.0.3",
    "flake8~=3.5",
    "pytest~=6.2.5",
    "pytest-cov~=3.0.0",
    "pytest-mock~=3.6.1",
    "pytest-xdist>=1.34.0",
    "pytest-rerunfailures~=10.2",
    "pytest-timeout~=2.0.2",
    "pytest-benchmark~=3.4.0",
    "testtools>=2",
    "hbutils>=0.6.13",
    "setuptools>=66.1.1",
    "numpy>=1.21.6",
    "easydict>=1.7,<2",
    "swig >= 4.1.1",
    "opencv-python<=4.11",
]
cpu = ["torch>=2.6.0"]
gpu = ["torch>=2.6.0"]

[build-system]
requires = [
    "setuptools>=66.1.1", # Match test dependency
    "wheel",
    "Cython>=0.29",
    "numpy>=1.24.1",
]

[tool.cibuildwheel]
skip = ["pp*", "*musllinux*"] # Do not build for PyPy, and musllinux

## Windows build configuration
[tool.cibuildwheel.windows]
archs = ["x86", 'AMD64']
#before-test = [# Unittest for windows
#    "pip install -r \"{project}\\requirements-test.txt\"",
#]
#test-command = [
#    #    "xcopy /e /i \"{project}\\lzero\" lzero",
#    "copy \"{project}\\pytest.ini\" pytest.ini",
#    "pytest lzero -sv -m unittest --log-level=DEBUG",
#]

## macOS build configuration
[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"] # Build for x86_64 and arm64
#before-test = [# Unittest for macos
#    "pip install -r {project}/requirements-test.txt",
#]
#test-command = [
#    #    "cp -rf {project}/lzero lzero",
#    "cp {project}/pytest.ini pytest.ini",
#    "pytest lzero -sv -m unittest --log-level=DEBUG",
#]


## Linux build configuration
[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"] # Build for x86_64 and arm64
#before-test = [# Unittest for linux
#    "pip install -r {project}/requirements-test.txt",
#]
#test-command = [
#    #    "cp -rf {project}/lzero lzero",
#    "cp {project}/pytest.ini pytest.ini",
#    "pytest lzero -sv -m unittest --log-level=DEBUG",
#]


[tool.uv]
# 自定义缓存键，覆盖默认行为。这几个同时改变时，才会重新构建
cache-keys = [
    # 3. 关键！监控所有 .pyx 文件的变化。以决定是否重新运行setup.py
    #    根据你的 setup.py，这些文件位于 'lzero' 和 'zoo' 目录下。
    #    我们使用 glob 模式来匹配所有文件。
    { file = "lzero/**/*.pyx" },
    { file = "zoo/**/*.pyx" }
]
# 必须配置，否则会有
# error: Requirements contain conflicting indexes for package `torch` in all marker environments:
# - https://download.pytorch.org/whl/cpu
# - https://download.pytorch.org/whl/cu124
conflicts = [
  [{ extra = "cpu" }, { extra = "gpu" }]
]

[tool.uv.sources]
torch = [
  { index = "pytorch-gpu", extra = "gpu" }, # GPU环境用GPU源
  { index = "pytorch-cpu", extra = "cpu" }, 
]

# 索引定义
[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true
[[tool.uv.index]]
name = "pytorch-gpu"
url = "https://download.pytorch.org/whl/cu124"
explicit = true
